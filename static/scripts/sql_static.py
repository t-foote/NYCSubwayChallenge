import csv
import os

# Paths
STATIC_DIR = os.path.join(os.path.dirname(__file__), '..', 'mta-static')
OUT_SQL = os.path.join(os.path.dirname(__file__), 'populate_static.sql')

# Helper: Read CSV
def read_csv(filename):
    with open(os.path.join(STATIC_DIR, filename), newline='', encoding='utf-8') as f:
        return list(csv.DictReader(f))

# 1. Stops
stops_rows = read_csv('stops.txt')
stops = []
stop_id_map = {}  # nyct_stop_id -> (id, stop_name, lat, lon)
stop_pk = 1
for row in stops_rows:
    if row.get('location_type', '1') == '1':
        stops.append((stop_pk, row['stop_id'], row['stop_name'], float(row['stop_lat']), float(row['stop_lon'])))
        stop_id_map[row['stop_id']] = stop_pk
        stop_pk += 1

# 2. Routes
routes_rows = read_csv('routes.txt')
routes = []
route_id_map = {}  # route_id -> pk
route_pk = 1
for row in routes_rows:
    if row.get('route_type', '1') == '1':  # Only subway
        routes.append((route_pk, row['route_id'], row['route_long_name']))
        route_id_map[row['route_id']] = route_pk
        route_pk += 1

# 3. Shapes
shapes_rows = read_csv('shapes.txt')
shapes = []
shape_id_map = {}  # shape_id -> pk
shape_pk = 1
for row in shapes_rows:
    sid = row['shape_id']
    if sid not in shape_id_map:
        shapes.append((shape_pk, sid))
        shape_id_map[sid] = shape_pk
        shape_pk += 1

# 4. Shape Points
shape_points = []
for row in shapes_rows:
    sid = row['shape_id']
    if sid in shape_id_map:
        shape_points.append((
            None,  # id (auto)
            int(row['shape_pt_sequence']),
            shape_id_map[sid],
            float(row['shape_pt_lat']),
            float(row['shape_pt_lon'])
        ))

# 5. Trips
trips_rows = read_csv('trips.txt')
trips = []
trip_id_map = {}  # trip_id -> pk
trip_pk = 1
for row in trips_rows:
    route_fk = route_id_map.get(row['route_id'])
    shape_fk = shape_id_map.get(row['shape_id'])
    if not route_fk or not shape_fk:
        continue
    # Map service_id
    service = row['service_id'].lower()
    if 'weekday' in service:
        service_id = 0
    elif 'saturday' in service:
        service_id = 1
    elif 'sunday' in service:
        service_id = 2
    else:
        service_id = 0  # Default to weekday
    trips.append((trip_pk, row['trip_id'], service_id, route_fk, shape_fk))
    trip_id_map[row['trip_id']] = trip_pk
    trip_pk += 1

# 6. Trip Stop Times
stop_times_rows = read_csv('stop_times.txt')
trip_stop_times = []
for row in stop_times_rows:
    trip_fk = trip_id_map.get(row['trip_id'])
    stop_fk = stop_id_map.get(row['stop_id'])
    if not trip_fk or not stop_fk:
        continue
    # Handle times >= 24:00:00
    def parse_time(t):
        if not t or t == '':
            return '00:00:00', False
        h, m, s = map(int, t.split(':'))
        is_next_day = False
        if h >= 24:
            h -= 24
            is_next_day = True
        return f'{h:02}:{m:02}:{s:02}', is_next_day

    arr_time, arr_next = parse_time(row['arrival_time'])
    dep_time, dep_next = parse_time(row['departure_time'])
    trip_stop_times.append((
        None,  # id (auto)
        trip_fk,
        stop_fk,
        dep_time,
        dep_next,
        arr_time,
        arr_next,
        int(row['stop_sequence'])
    ))

# 7. Transfers
transfers_rows = read_csv('transfers.txt')
transfers = []
for row in transfers_rows:
    from_fk = stop_id_map.get(row['from_stop_id'])
    to_fk = stop_id_map.get(row['to_stop_id'])
    if not from_fk or not to_fk or from_fk == to_fk:
        continue
    # Add both directions
    for a, b in [(from_fk, to_fk), (to_fk, from_fk)]:
        min_time = int(row.get('min_transfer_time', '0') or 0)
        min_time = min_time // 60 if min_time else 0
        transfers.append((
            None,  # id (auto)
            a,
            b,
            min_time,
            False  # is_walking_transfer
        ))

# --- Write SQL ---
with open(OUT_SQL, 'w', encoding='utf-8') as f:
    f.write(f'-- SQL file generated by {os.path.basename(__file__)}\n')
    # Stops
    for s in stops:
        f.write(f'INSERT INTO stops (id, nyct_stop_id, stop_name, latitude, longitude) VALUES ({s[0]}, \'{s[1]}\', \'{s[2].replace("'", "''")}\', {s[3]}, {s[4]});\n')
    # Routes
    for r in routes:
        route_name = r[2].replace("'", "''") if r[2] else ''
        f.write(f"INSERT INTO routes (id, route_id, route_name) VALUES ({r[0]}, '{r[1]}', '{route_name}');\n")
    # Shapes
    for s in shapes:
        f.write(f"INSERT INTO shapes (id, shape_id) VALUES ({s[0]}, '{s[1]}');\n")
    # Shape Points
    for sp in shape_points:
        f.write(f"INSERT INTO shape_points (shape_pt_sequence, shape_id, latitude, longitude) VALUES ({sp[1]}, {sp[2]}, {sp[3]}, {sp[4]});\n")
    # Trips
    for t in trips:
        f.write(f"INSERT INTO trips_scheduled (id, nyct_trip_id, service_id, route_id, shape_id) VALUES ({t[0]}, '{t[1]}', {t[2]}, {t[3]}, {t[4]});\n")
    # Trip Stop Times
    for tst in trip_stop_times:
        f.write(f"INSERT INTO trip_stop_times_scheduled (trip_id, stop_id, dep_time, dep_time_is_next_day, arr_time, arr_time_is_next_day, sequence_number) VALUES ({tst[1]}, {tst[2]}, '{tst[3]}', {'true' if tst[4] else 'false'}, '{tst[5]}', {'true' if tst[6] else 'false'}, {tst[7]});\n")
    # Transfers
    for tr in transfers:
        f.write(f"INSERT INTO transfers (from_stop_id, to_stop_id, transfer_time_min, is_walking_transfer) VALUES ({tr[1]}, {tr[2]}, {tr[3]}, {'true' if tr[4] else 'false'});\n")

print(f"SQL written to {OUT_SQL}")